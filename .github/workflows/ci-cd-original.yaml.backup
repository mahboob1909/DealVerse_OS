name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: dealverse/backend
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Backend Testing
  backend-test:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Cache Python dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-cov bandit safety

    - name: Run security checks
      working-directory: ./backend
      run: |
        # Security vulnerability scan
        safety check
        # Static security analysis
        bandit -r app/ -f json -o bandit-report.json || true

    - name: Run linting
      working-directory: ./backend
      run: |
        # Install linting tools
        pip install flake8 black isort mypy
        # Code formatting check
        black --check app/
        # Import sorting check
        isort --check-only app/
        # Linting
        flake8 app/
        # Type checking
        mypy app/ || true

    - name: Run tests
      working-directory: ./backend
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test-secret-key
        ENVIRONMENT: testing
      run: |
        pytest --cov=app --cov-report=xml --cov-report=html tests/

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml
        flags: backend
        name: backend-coverage

    - name: Upload test artifacts
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: backend-test-results
        path: |
          backend/htmlcov/
          backend/bandit-report.json

  # Frontend Testing
  frontend-test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run type checking
      run: npm run type-check

    - name: Run tests
      run: npm run test:coverage

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  # Build and Push Docker Images
  build-and-push:
    needs: [backend-test, frontend-test]
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        platforms: linux/amd64,linux/arm64

  # Deploy to Staging
  deploy-staging:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    environment:
      name: staging
      url: https://staging.dealverse.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check if staging secrets are configured
      id: check-staging-secrets
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_STAGING }}
      run: |
        if [ -z "$KUBE_CONFIG" ]; then
          echo "KUBE_CONFIG_STAGING secret is not configured. Skipping staging deployment."
          echo "skip_deployment=true" >> $GITHUB_OUTPUT
        else
          echo "skip_deployment=false" >> $GITHUB_OUTPUT
        fi

    - name: Configure kubectl
      if: steps.check-staging-secrets.outputs.skip_deployment == 'false'
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_STAGING || '' }}

    - name: Deploy to staging
      if: steps.check-staging-secrets.outputs.skip_deployment == 'false'
      run: |
        # Update image tag in staging manifests
        sed -i "s|image: dealverse/backend:.*|image: ${{ needs.build-and-push.outputs.image-tag }}|g" k8s/staging/backend.yaml

        # Create staging namespace if it doesn't exist
        kubectl create namespace dealverse-staging --dry-run=client -o yaml | kubectl apply -f -

        # Apply staging configurations
        kubectl apply -f k8s/configmap.yaml -n dealverse-staging
        kubectl apply -f k8s/secrets.yaml -n dealverse-staging
        kubectl apply -f k8s/redis.yaml -n dealverse-staging
        kubectl apply -f k8s/staging/

        # Wait for rollout
        kubectl rollout status deployment/dealverse-backend -n dealverse-staging --timeout=300s

    - name: Run smoke tests
      if: steps.check-staging-secrets.outputs.skip_deployment == 'false'
      run: |
        # Wait for service to be ready
        sleep 30
        # Basic health check (adjust URL as needed)
        echo "Staging deployment completed. Health check URL needs to be configured."
        # curl -f https://staging.dealverse.com/health || exit 1

    - name: Skip staging deployment notice
      if: steps.check-staging-secrets.outputs.skip_deployment == 'true'
      run: |
        echo "⚠️ Staging deployment skipped: KUBE_CONFIG_STAGING secret not configured"
        echo "To enable staging deployments, configure the KUBE_CONFIG_STAGING secret in your repository settings."

  # Deploy to Production
  deploy-production:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    environment:
      name: production
      url: https://dealverse.com

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check if production secrets are configured
      id: check-production-secrets
      env:
        KUBE_CONFIG: ${{ secrets.KUBE_CONFIG_PRODUCTION }}
      run: |
        if [ -z "$KUBE_CONFIG" ]; then
          echo "KUBE_CONFIG_PRODUCTION secret is not configured. Skipping production deployment."
          echo "skip_deployment=true" >> $GITHUB_OUTPUT
        else
          echo "skip_deployment=false" >> $GITHUB_OUTPUT
        fi

    - name: Configure kubectl
      if: steps.check-production-secrets.outputs.skip_deployment == 'false'
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.KUBE_CONFIG_PRODUCTION || '' }}

    - name: Deploy to production
      if: steps.check-production-secrets.outputs.skip_deployment == 'false'
      run: |
        # Update image tag in production manifests
        sed -i "s|image: dealverse/backend:.*|image: ${{ needs.build-and-push.outputs.image-tag }}|g" k8s/backend.yaml

        # Apply production configurations
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/secrets.yaml
        kubectl apply -f k8s/redis.yaml
        kubectl apply -f k8s/backend.yaml
        kubectl apply -f k8s/celery.yaml
        kubectl apply -f k8s/ingress.yaml

        # Wait for rollout
        kubectl rollout status deployment/dealverse-backend -n dealverse --timeout=600s

    - name: Run production smoke tests
      if: steps.check-production-secrets.outputs.skip_deployment == 'false'
      run: |
        # Wait for service to be ready
        sleep 60
        # Basic health check (adjust URLs as needed)
        echo "Production deployment completed. Health check URLs need to be configured."
        # curl -f https://api.dealverse.com/health || exit 1
        # curl -f https://api.dealverse.com/api/v1/health || exit 1

    - name: Skip production deployment notice
      if: steps.check-production-secrets.outputs.skip_deployment == 'true'
      run: |
        echo "⚠️ Production deployment skipped: KUBE_CONFIG_PRODUCTION secret not configured"
        echo "To enable production deployments, configure the KUBE_CONFIG_PRODUCTION secret in your repository settings."

    - name: Check if Slack webhook is configured
      id: check-slack-webhook
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
      run: |
        if [ -z "$SLACK_WEBHOOK" ]; then
          echo "SLACK_WEBHOOK secret is not configured. Skipping Slack notification."
          echo "skip_notification=true" >> $GITHUB_OUTPUT
        else
          echo "skip_notification=false" >> $GITHUB_OUTPUT
        fi

    - name: Notify deployment
      uses: slackapi/slack-github-action@v1.24.0
      if: always() && steps.check-slack-webhook.outputs.skip_notification == 'false'
      with:
        payload: |
          {
            "text": "DealVerse OS Deployment ${{ job.status }}",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "Deployment Status: *${{ job.status }}*\nRepository: ${{ github.repository }}\nBranch: ${{ github.ref_name }}\nCommit: ${{ github.sha }}"
                }
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK || '' }}

    - name: Skip Slack notification notice
      if: always() && steps.check-slack-webhook.outputs.skip_notification == 'true'
      run: |
        echo "⚠️ Slack notification skipped: SLACK_WEBHOOK secret not configured"
        echo "To enable Slack notifications, configure the SLACK_WEBHOOK secret in your repository settings."

  # Security Scanning
  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.event_name != 'pull_request'

    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-and-push.outputs.image-tag }}
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'
