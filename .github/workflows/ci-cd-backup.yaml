# Simplified CI/CD Pipeline for DealVerse OS
# This workflow is optimized for Cloudflare Pages + Render deployment strategy

name: Build and Validate

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  # Basic validation and build check
  validate-build:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'

    - name: Install frontend dependencies
      run: npm ci

    - name: Build frontend
      run: npm run build

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Validate backend dependencies
      working-directory: ./backend
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        echo "‚úÖ Backend dependencies installed successfully"

    - name: Validate Docker configuration
      working-directory: ./backend
      run: |
        docker build -t dealverse-backend-test .
        echo "‚úÖ Docker build successful"

  # Deployment readiness check
  deployment-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Check deployment configurations
      run: |
        echo "üîç Checking deployment configurations..."

        # Check Cloudflare Pages config
        if [ -f "wrangler.toml" ]; then
          echo "‚úÖ Cloudflare Pages configuration found"
        else
          echo "‚ùå wrangler.toml not found"
        fi

        # Check Render config
        if [ -f "backend/render.yaml" ]; then
          echo "‚úÖ Render deployment configuration found"
        else
          echo "‚ùå backend/render.yaml not found"
        fi

        # Check Docker config
        if [ -f "backend/Dockerfile" ]; then
          echo "‚úÖ Docker configuration found"
        else
          echo "‚ùå backend/Dockerfile not found"
        fi

        echo ""
        echo "üöÄ Deployment Strategy:"
        echo "   Frontend: Cloudflare Pages (Static Export)"
        echo "   Backend: Render.com (Docker)"
        echo "   Database: Neon.tech (PostgreSQL)"
        echo ""
        echo "üìã Next Steps:"
        echo "1. Deploy backend to Render.com using render.yaml"
        echo "2. Update NEXT_PUBLIC_API_URL in Cloudflare Pages"
        echo "3. Set Clerk environment variables for authentication"